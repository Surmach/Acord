{"version":3,"sources":["components/phoneAuth.jsx","App.js","serviceWorker.js","index.js"],"names":["Example","onVerifyCodeSubmit","e","preventDefault","getCodeFromUserInput","window","verifyingCode","updateVerifyCodeButtonUI","code","confirmationResult","confirm","then","result","user","updateVerificationCodeFormUI","catch","error","console","alert","message","updateSignInButtonUI","cancelVerification","updateSignInFormUI","onSignOutClick","firebase","auth","signOut","document","getElementById","value","getPhoneNumberFromUserInput","isPhoneNumberValid","search","disabled","signingIn","currentUser","style","display","grecaptcha","recaptchaWidgetId","reset","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","onload","onAuthStateChanged","uid","email","photoURL","phoneNumber","isAnonymous","displayName","providerData","emailVerified","textContent","JSON","stringify","updateSignedInUserStatusUI","addEventListener","recaptchaVerifier","RecaptchaVerifier","response","appVerifier","signInWithPhoneNumber","onSignInSubmit","render","widgetId","className","href","id","action","type","pattern","htmlFor","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","URL","process","origin","fetch","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6PAIe,SAASA,IA4FxB,SAASC,EAAmBC,GAE5B,GADAA,EAAEC,iBACIC,IAAwB,CAC9BC,OAAOC,eAAgB,EACvBC,IACA,IAAIC,EAAOJ,IACXC,OAAOI,mBAAmBC,QAAQF,GAAMG,MAAK,SAAUC,GAE5CA,EAAOC,KAClBR,OAAOC,eAAgB,EACvBD,OAAOI,mBAAqB,KAC5BK,OACGC,OAAM,SAAUC,GAEnBC,QAAQD,MAAM,6CAA8CA,GAC5DX,OAAOa,MAAM,kDACXF,EAAMR,KAAO,OAASQ,EAAMG,SAC9Bd,OAAOC,eAAgB,EACvBc,IACAb,QAOA,SAASc,EAAmBnB,GAC5BA,EAAEC,iBACFE,OAAOI,mBAAqB,KAC5BK,IACAQ,IAKA,SAASC,IACTC,IAASC,OAAOC,UAKhB,SAAStB,IACT,OAAOuB,SAASC,eAAe,qBAAqBC,MAKpD,SAASC,IACT,OAAOH,SAASC,eAAe,gBAAgBC,MAK/C,SAASE,IAGT,OAAwC,IADtBD,IACCE,OAFL,sBAgBd,SAASZ,IACTO,SAASC,eAAe,kBAAkBK,UACzCF,OACI1B,OAAO6B,UAKZ,SAAS3B,IACToB,SAASC,eAAe,sBAAsBK,WAC5C5B,OAAOC,gBACLF,IAKJ,SAASkB,IACLE,IAASC,OAAOU,aAAe9B,OAAOI,mBAC1CkB,SAASC,eAAe,gBAAgBQ,MAAMC,QAAU,QA1B9B,qBAAfC,cAC4B,qBAA7BjC,OAAOkC,mBACjBlC,OAAOiC,WAAWE,MAAMnC,OAAOkC,mBA2B/BZ,SAASC,eAAe,gBAAgBQ,MAAMC,QAAU,SAMxD,SAASvB,KACJU,IAASC,OAAOU,aAAe9B,OAAOI,mBAC3CkB,SAASC,eAAe,0BAA0BQ,MAAMC,QAAU,QAElEV,SAASC,eAAe,0BAA0BQ,MAAMC,QAAU,OA+BlE,OApNAI,wBAXuB,CACvBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAOf5C,OAAO6C,OAAS,WAEhB1B,IAASC,OAAO0B,oBAAmB,SAAStC,GAC5C,GAAIA,EAEMA,EAAKuC,IACHvC,EAAKwC,MACFxC,EAAKyC,SACFzC,EAAK0C,YACL1C,EAAK2C,YACL3C,EAAK4C,YACJ5C,EAAK6C,aACJ7C,EAAK8C,cAEzBvC,IACAE,IAyKIE,IAASC,OAAOU,YACpBR,SAASC,eAAe,mBAAmBQ,MAAMC,QAAU,QAE3DV,SAASC,eAAe,mBAAmBQ,MAAMC,QAAU,OAM3D,WACA,IAAIxB,EAAOW,IAASC,OAAOU,YACvBtB,GACJc,SAASC,eAAe,kBAAkBgC,YAAc,YACxDjC,SAASC,eAAe,mBAAmBgC,YAAcC,KAAKC,UAAUjD,EAAM,KAAM,OAEpFc,SAASC,eAAe,kBAAkBgC,YAAc,aACxDjC,SAASC,eAAe,mBAAmBgC,YAAc,QAvLzDG,GACAjD,OAGAa,SAASC,eAAe,mBAAmBoC,iBAAiB,QAASzC,GACrEI,SAASC,eAAe,gBAAgBoC,iBAAiB,QAAS5C,GAClEO,SAASC,eAAe,gBAAgBoC,iBAAiB,SAAU5C,GACnEO,SAASC,eAAe,qBAAqBoC,iBAAiB,QAASzD,GACvEoB,SAASC,eAAe,qBAAqBoC,iBAAiB,SAAUzD,GACxEoB,SAASC,eAAe,0BAA0BoC,iBAAiB,SAAU/D,GAC7E0B,SAASC,eAAe,6BAA6BoC,iBAAiB,QAAS3C,GAE/EhB,OAAO4D,kBAAoB,IAAIzC,IAASC,KAAKyC,kBAAkB,iBAAkB,CACjF,KAAQ,YACR,SAAY,SAASC,IAerB,WACA,GAAIpC,IAAsB,CAC1B1B,OAAO6B,WAAY,EACnBd,IACA,IAAImC,EAAczB,IACdsC,EAAc/D,OAAO4D,kBACzBzC,IAASC,OAAO4C,sBAAsBd,EAAaa,GAClDzD,MAAK,SAAUF,GAGhBJ,OAAOI,mBAAqBA,EAC5BJ,OAAO6B,WAAY,EACnBd,IACAN,IACAP,IACAe,OACGP,OAAM,SAAUC,GAEnBC,QAAQD,MAAM,qCAAsCA,GACpDX,OAAOa,MAAM,0CACXF,EAAMR,KAAO,OAASQ,EAAMG,SAC9Bd,OAAO6B,WAAY,EACnBZ,IACAF,QApCAkD,MAKAjE,OAAO4D,kBAAkBM,SAAS5D,MAAK,SAAS6D,GAChDnE,OAAOkC,kBAAoBiC,EAC3BpD,QA0KA,yBAAKqD,UAAU,iEAGX,4BAAQA,UAAU,sEACd,yBAAKA,UAAU,8DACX,yBACIA,UAAU,oGACV,uBAAGC,KAAK,KACJ,2DAMhB,0BAAMD,UAAU,2CACZ,yBAAKA,UAAU,8DAGX,yBAAKE,GAAG,eACJF,UAAU,uGACV,yBAAKA,UAAU,mEACX,wBAAIA,UAAU,wBAAd,yDAEJ,yBAAKA,UAAU,sDACX,oEAEA,0BAAME,GAAG,eAAeC,OAAO,KAE3B,yBAAKH,UAAU,gEACX,2BAAOA,UAAU,uBAAuBI,KAAK,OAAOC,QAAQ,wBACxDH,GAAG,iBACP,2BAAOF,UAAU,uBAAuBM,QAAQ,gBAAhD,8BAEA,0BAAMN,UAAU,wBAAhB,gDAIJ,4BAAQA,UAAU,8CACdE,GAAG,kBADP,YAKJ,4BAAQF,UAAU,8CACdE,GAAG,mBADP,YAGA,0BAAMA,GAAG,yBAAyBC,OAAO,KAErC,yBAAKH,UAAU,gEACV,2BAAOA,UAAU,uBAAuBI,KAAK,OAAOF,GAAG,sBACvD,2BAAOF,UAAU,uBAAuBM,QAAQ,qBAAhD,mCAKL,2BAAOF,KAAK,SAASJ,UAAU,8CAC3BE,GAAG,qBAAqB9C,MAAM,gBAElC,4BAAQ4C,UAAU,8CACdE,GAAG,6BADP,aASZ,yBAAKA,GAAG,oBACJF,UAAU,uGACV,yBAAKA,UAAU,mEACX,wBAAIA,UAAU,wBAAd,wBAEJ,yBAAKA,UAAU,sDAEX,yBAAKA,UAAU,0BAAf,4BAC6B,0BAAME,GAAG,kBAAT,WACzB,8CAAmB,6CAAnB,kBACA,6BAAK,0BAAMA,GAAG,mBAAT,eCxSdK,MANf,WACE,OACE,kBAAChF,EAAD,OCMEiF,EAAcC,QACW,cAA7B7E,OAAO8E,SAASC,UAEe,UAA7B/E,OAAO8E,SAASC,UAEhB/E,OAAO8E,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT5E,MAAK,SAAAiF,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BjF,QAAQkF,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlB3E,QAAQkF,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5B7E,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MC1FjEsF,IAAS/B,OAAO,kBAAC,EAAD,MAAS5C,SAASC,eAAe,SDgB1C,SAAkB4D,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIc,IAAIC,SAAwBnG,OAAO8E,SAAST,MACpD+B,SAAWpG,OAAO8E,SAASsB,OAIvC,OAGFpG,OAAO2D,iBAAiB,QAAQ,WAC9B,IAAMuB,EAAK,UAAMiB,SAAN,sBAEPvB,IAgEV,SAAiCM,EAAOC,GAEtCkB,MAAMnB,GACH5E,MAAK,SAAAwD,GAEJ,IAAMwC,EAAcxC,EAASyC,QAAQC,IAAI,gBAEnB,MAApB1C,EAAS2C,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CtB,UAAUC,cAAcsB,MAAMrG,MAAK,SAAAiF,GACjCA,EAAaqB,aAAatG,MAAK,WAC7BN,OAAO8E,SAAS+B,eAKpB5B,EAAgBC,EAAOC,MAG1BzE,OAAM,WACLE,QAAQkF,IACN,oEArFAgB,CAAwB5B,EAAOC,GAI/BC,UAAUC,cAAcsB,MAAMrG,MAAK,WACjCM,QAAQkF,IACN,iHAMJb,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.e87cd78a.chunk.js","sourcesContent":["import React from 'react';\r\nimport firebase, { initializeApp,confirmationResult,grecaptcha } from 'firebase'\r\nimport recaptchaVerifier from 'firebase'\r\nimport * as firebaseui from 'firebaseui'\r\nexport default function Example() {\r\nconst firebaseConfig = {\r\napiKey: \"AIzaSyC4rA1w4H5sRwXkxei0AjqgI_T99Jhk638\",\r\nauthDomain: \"acord-659d0.firebaseapp.com\",\r\ndatabaseURL: \"https://acord-659d0.firebaseio.com\",\r\nprojectId: \"acord-659d0\",\r\nstorageBucket: \"acord-659d0.appspot.com\",\r\nmessagingSenderId: \"287905987520\",\r\nappId: \"1:287905987520:web:52f2b886f9475385096625\",\r\nmeasurementId: \"G-R27V84X3LB\"\r\n};\r\n\r\ninitializeApp(firebaseConfig)\r\n\r\n\r\n///////////////////////////////////////////////////\r\nwindow.onload = function() {\r\n// Listening for auth state changes.\r\nfirebase.auth().onAuthStateChanged(function(user) {\r\nif (user) {\r\n// User is signed in.\r\nvar uid = user.uid;\r\nvar email = user.email;\r\nvar photoURL = user.photoURL;\r\nvar phoneNumber = user.phoneNumber;\r\nvar isAnonymous = user.isAnonymous;\r\nvar displayName = user.displayName;\r\nvar providerData = user.providerData;\r\nvar emailVerified = user.emailVerified;\r\n}\r\nupdateSignInButtonUI();\r\nupdateSignInFormUI();\r\nupdateSignOutButtonUI();\r\nupdateSignedInUserStatusUI();\r\nupdateVerificationCodeFormUI();\r\n});\r\n// Event bindings.\r\ndocument.getElementById('sign-out-button').addEventListener('click', onSignOutClick);\r\ndocument.getElementById('phone-number').addEventListener('keyup', updateSignInButtonUI);\r\ndocument.getElementById('phone-number').addEventListener('change', updateSignInButtonUI);\r\ndocument.getElementById('verification-code').addEventListener('keyup', updateVerifyCodeButtonUI);\r\ndocument.getElementById('verification-code').addEventListener('change', updateVerifyCodeButtonUI);\r\ndocument.getElementById('verification-code-form').addEventListener('submit', onVerifyCodeSubmit);\r\ndocument.getElementById('cancel-verify-code-button').addEventListener('click', cancelVerification);\r\n// [START appVerifier]\r\nwindow.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('sign-in-button', {\r\n'size': 'invisible',\r\n'callback': function(response) {\r\n// reCAPTCHA solved, allow signInWithPhoneNumber.\r\nonSignInSubmit();\r\n}\r\n});\r\n// [END appVerifier]\r\n\r\nwindow.recaptchaVerifier.render().then(function(widgetId) {\r\nwindow.recaptchaWidgetId = widgetId;\r\nupdateSignInButtonUI();\r\n});\r\n};\r\n/**\r\n* Function called when clicking the Login/Logout button.\r\n*/\r\nfunction onSignInSubmit() {\r\nif (isPhoneNumberValid()) {\r\nwindow.signingIn = true;\r\nupdateSignInButtonUI();\r\nvar phoneNumber = getPhoneNumberFromUserInput();\r\nvar appVerifier = window.recaptchaVerifier;\r\nfirebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier)\r\n.then(function (confirmationResult) {\r\n// SMS sent. Prompt user to type the code from the message, then sign the\r\n// user in with confirmationResult.confirm(code).\r\nwindow.confirmationResult = confirmationResult;\r\nwindow.signingIn = false;\r\nupdateSignInButtonUI();\r\nupdateVerificationCodeFormUI();\r\nupdateVerifyCodeButtonUI();\r\nupdateSignInFormUI();\r\n}).catch(function (error) {\r\n// Error; SMS not sent\r\nconsole.error('Error during signInWithPhoneNumber', error);\r\nwindow.alert('Error during signInWithPhoneNumber:\\n\\n'\r\n+ error.code + '\\n\\n' + error.message);\r\nwindow.signingIn = false;\r\nupdateSignInFormUI();\r\nupdateSignInButtonUI();\r\n});\r\n}\r\n}\r\n/**\r\n* Function called when clicking the \"Verify Code\" button.\r\n*/\r\nfunction onVerifyCodeSubmit(e) {\r\ne.preventDefault();\r\nif (!!getCodeFromUserInput()) {\r\nwindow.verifyingCode = true;\r\nupdateVerifyCodeButtonUI();\r\nvar code = getCodeFromUserInput();\r\nwindow.confirmationResult.confirm(code).then(function (result) {\r\n// User signed in successfully.\r\nvar user = result.user;\r\nwindow.verifyingCode = false;\r\nwindow.confirmationResult = null;\r\nupdateVerificationCodeFormUI();\r\n}).catch(function (error) {\r\n// User couldn't sign in (bad verification code?)\r\nconsole.error('Error while checking the verification code', error);\r\nwindow.alert('Error while checking the verification code:\\n\\n'\r\n+ error.code + '\\n\\n' + error.message);\r\nwindow.verifyingCode = false;\r\nupdateSignInButtonUI();\r\nupdateVerifyCodeButtonUI();\r\n});\r\n}\r\n}\r\n/**\r\n* Cancels the verification code input.\r\n*/\r\nfunction cancelVerification(e) {\r\ne.preventDefault();\r\nwindow.confirmationResult = null;\r\nupdateVerificationCodeFormUI();\r\nupdateSignInFormUI();\r\n}\r\n/**\r\n* Signs out the user when the sign-out button is clicked.\r\n*/\r\nfunction onSignOutClick() {\r\nfirebase.auth().signOut();\r\n}\r\n/**\r\n* Reads the verification code from the user input.\r\n*/\r\nfunction getCodeFromUserInput() {\r\nreturn document.getElementById('verification-code').value;\r\n}\r\n/**\r\n* Reads the phone number from the user input.\r\n*/\r\nfunction getPhoneNumberFromUserInput() {\r\nreturn document.getElementById('phone-number').value;\r\n}\r\n/**\r\n* Returns true if the phone number is valid.\r\n*/\r\nfunction isPhoneNumberValid() {\r\nvar pattern = /^\\+[0-9\\s\\-\\(\\)]+$/;\r\nvar phoneNumber = getPhoneNumberFromUserInput();\r\nreturn phoneNumber.search(pattern) !== -1;\r\n}\r\n/**\r\n* Re-initializes the ReCaptacha widget.\r\n*/\r\nfunction resetReCaptcha() {\r\nif (typeof grecaptcha !== 'undefined'\r\n&& typeof window.recaptchaWidgetId !== 'undefined') {\r\nwindow.grecaptcha.reset(window.recaptchaWidgetId);\r\n}\r\n}\r\n/**\r\n* Updates the Sign-in button state depending on ReCAptcha and form values state.\r\n*/\r\nfunction updateSignInButtonUI() {\r\ndocument.getElementById('sign-in-button').disabled =\r\n!isPhoneNumberValid()\r\n|| !!window.signingIn;\r\n}\r\n/**\r\n* Updates the Verify-code button state depending on form values state.\r\n*/\r\nfunction updateVerifyCodeButtonUI() {\r\ndocument.getElementById('verify-code-button').disabled =\r\n!!window.verifyingCode\r\n|| !getCodeFromUserInput();\r\n}\r\n/**\r\n* Updates the state of the Sign-in form.\r\n*/\r\nfunction updateSignInFormUI() {\r\nif (firebase.auth().currentUser || window.confirmationResult) {\r\ndocument.getElementById('sign-in-form').style.display = 'none';\r\n} else {\r\nresetReCaptcha();\r\ndocument.getElementById('sign-in-form').style.display = 'block';\r\n}\r\n}\r\n/**\r\n* Updates the state of the Verify code form.\r\n*/\r\nfunction updateVerificationCodeFormUI() {\r\nif (!firebase.auth().currentUser && window.confirmationResult) {\r\ndocument.getElementById('verification-code-form').style.display = 'block';\r\n} else {\r\ndocument.getElementById('verification-code-form').style.display = 'none';\r\n}\r\n}\r\n/**\r\n* Updates the state of the Sign out button.\r\n*/\r\nfunction updateSignOutButtonUI() {\r\nif (firebase.auth().currentUser) {\r\ndocument.getElementById('sign-out-button').style.display = 'block';\r\n} else {\r\ndocument.getElementById('sign-out-button').style.display = 'none';\r\n}\r\n}\r\n/**\r\n* Updates the Signed in user status panel.\r\n*/\r\nfunction updateSignedInUserStatusUI() {\r\nvar user = firebase.auth().currentUser;\r\nif (user) {\r\ndocument.getElementById('sign-in-status').textContent = 'Signed in';\r\ndocument.getElementById('account-details').textContent = JSON.stringify(user, null, ' ');\r\n} else {\r\ndocument.getElementById('sign-in-status').textContent = 'Signed out';\r\ndocument.getElementById('account-details').textContent = 'null';\r\n}\r\n}\r\n////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\nreturn (\r\n\r\n<div className=\"demo-layout mdl-layout mdl-js-layout mdl-layout--fixed-header\">\r\n\r\n\r\n    <header className=\"mdl-layout__header mdl-color-text--white mdl-color--light-blue-700\">\r\n        <div className=\"mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid\">\r\n            <div\r\n                className=\"mdl-layout__header-row mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--8-col-desktop\">\r\n                <a href=\"/\">\r\n                    <h3>Firebase Authentication</h3>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    </header>\r\n\r\n    <main className=\"mdl-layout__content mdl-color--grey-100\">\r\n        <div className=\"mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid\">\r\n\r\n\r\n            <div id=\"sign-in-card\"\r\n                className=\"mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--12-col-desktop\">\r\n                <div className=\"mdl-card__title mdl-color--light-blue-600 mdl-color-text--white\">\r\n                    <h2 className=\"mdl-card__title-text\">Phone number authentication with invisible ReCaptcha</h2>\r\n                </div>\r\n                <div className=\"mdl-card__supporting-text mdl-color-text--grey-600\">\r\n                    <p>Sign in with your phone number below.</p>\r\n\r\n                    <form id=\"sign-in-form\" action=\"#\">\r\n\r\n                        <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\r\n                            <input className=\"mdl-textfield__input\" type=\"text\" pattern=\"\\+[0-9\\s\\-\\(\\)]+\"\r\n                                id=\"phone-number\"/>\r\n                            <label className=\"mdl-textfield__label\" htmlFor=\"phone-number\">Enter your phone\r\n                                number...</label>\r\n                            <span className=\"mdl-textfield__error\">Input is not an international phone number!</span>\r\n                        </div>\r\n\r\n\r\n                        <button className=\"mdl-button mdl-js-button mdl-button--raised\"\r\n                            id=\"sign-in-button\">Sign-in</button>\r\n                    </form>\r\n\r\n\r\n                    <button className=\"mdl-button mdl-js-button mdl-button--raised\"\r\n                        id=\"sign-out-button\">Sign-out</button>\r\n\r\n                    <form id=\"verification-code-form\" action=\"#\">\r\n\r\n                        <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\r\n                             <input className=\"mdl-textfield__input\" type=\"text\" id=\"verification-code\"/>\r\n                             <label className=\"mdl-textfield__label\" htmlFor=\"verification-code\">Enter the verification\r\n                                code...</label>\r\n                        </div>\r\n\r\n\r\n                        <input type=\"submit\" className=\"mdl-button mdl-js-button mdl-button--raised\"\r\n                            id=\"verify-code-button\" value=\"Verify Code\" />\r\n\r\n                        <button className=\"mdl-button mdl-js-button mdl-button--raised\"\r\n                            id=\"cancel-verify-code-button\">Cancel</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            \r\n            \r\n\r\n\r\n            <div id=\"user-details-card\"\r\n                className=\"mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--12-col-desktop\">\r\n                <div className=\"mdl-card__title mdl-color--light-blue-600 mdl-color-text--white\">\r\n                    <h2 className=\"mdl-card__title-text\">User sign-in status</h2>\r\n                </div>\r\n                <div className=\"mdl-card__supporting-text mdl-color-text--grey-600\">\r\n\r\n                    <div className=\"user-details-container\">\r\n                        Firebase sign-in status: <span id=\"sign-in-status\">Unknown</span>\r\n                        <div>Firebase auth <code>currentUser</code> object value:</div>\r\n                        <pre><code id=\"account-details\">null</code></pre>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n</main>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n);\r\n}","import React from 'react';\nimport './App.css';\nimport Example from './components/phoneAuth';\n\nfunction App() {\n  return (\n    <Example></Example>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}